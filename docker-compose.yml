version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: anomalydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  air-data-service:
    build:
      context: .
      dockerfile: backend/air-data-service/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: on-failure

  anomaly-detection-service:
    build:
      context: .
      dockerfile: backend/anomaly-detection-service/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: on-failure

  data-storage-service:
    build:
      context: .
      dockerfile: backend/data-storage-service/Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  notification-service:
    build:
      context: .
      dockerfile: backend/notification-service/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      kafka:
        condition: service_started
    restart: on-failure

  script-runner-service:
    build:
      context: .
      dockerfile: backend/script-runner-service/Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: on-failure

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - air-data-service
      - anomaly-detection-service
      - data-storage-service
      - notification-service
      - script-runner-service

volumes:
  postgres_data:
